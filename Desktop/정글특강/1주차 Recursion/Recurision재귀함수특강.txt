Recurision재귀함수특강

@@프로그래밍의 요소
1. primitive expressions 
	숫자?
2. means of combination

3. means of abstraction***추상화
	네이밍을 한다? , 함수도 추상화의 방법이다 함수를 몇십줄을 써도 이름 하나로 쓰니까 
	복잡한형태를 하나의 단어로 추상화

	데이터의 추상화(struct, class ?) 구체적으로 무엇을 써야하는지 생각?
	  

@수학수식 -> 프로그래밍함수로  개발할때 어떻게 구현을 하는가
	생각의 흐름대로 -> 손으로 따라가야함 -->> 재사용할수있는형태로

	어플리케이션 오더 방식= 일반적인 방식? 파라미터를 계산한다음 호출하는방식
	노말 오더 방식= 계산을 안하고 가져가는방식

def p()
	while true:
		pass
def test(x,y)
	return 0 if x==0 else y
test(0,p())



def nsum(n):
    sum=0
    for i in range(n):
        sum+=i
    return sum

# 재귀 함수형식으로
# 탈출조건이 없으면 돌아오지않아~
# 부메랑처럼 돌아오는거야~
# 
def nsum(n):
    if n==0:
        return 0
    else:
        return n+nsum(n-1)

def nsum(n):
    sum=0
    for i in range(n):
        sum+=i
    return sum

# 재귀 함수형식으로
def nsum(n):
    if n==0:
        return 0
    else:
        return n+nsum(n-1)
    

    
#리커젼의 특징
# 중간에 멈춰서 확인할 수 없다
# 부메랑처럼 돌아온다(전부다는아니다)

# 리터레이션 > 테일리커젼 > 리커젼 셋중에 속도는 리커젼이 제일 느림


# 테일 리커젼? 부메랑처럼 안돌아옴ㅁ for문과비슷
# 실행모델이 직선
# 이거는 중간값이 저장이 된다
# 반복문이 있으면 추천 ㄴㄴ
def sum_iter(n,total):
    if n ==0:
        return total
    else: 
        return sum_iter(n-1,total+n)
    
def sum(n):
    return sum_iter(n,0)


# 거듭 제곱
def exp(b,n):
    if n==0:
        return 1
    else:
        return b*exp(b,n-1)

#테일 리커젼방식으로 거듭제곱?



def fest_exp(b,n):
    if n==0:
        return 1
    else:
        if is_even(n):
            return fest_exp(b,n//2)**2
        else:
            return b*fest_exp(b,n-1)



	
	
